import nltk
from nltk.corpus import state_union
from nltk.tokenize import PunktSentenceTokenizer

# Find out which words modify or effect nouns. There could be many modifiers. We
# can chunk into groups of noun phrases to get better descriptors.

# One popular thing is to group words by part of speech, such as various noun
# phrases.

train_text = state_union.raw("2005-GWBush.txt")
sample_text = state_union.raw("2006-GWBush.txt")

custom_sent_tokenize = PunktSentenceTokenizer(train_text)

tokenized = custom_sent_tokenize.tokenize(sample_text)


# Tuples, part of speech, etc generated by process_content
# POS part of speech, see POS tag list
def process_content():
    try:
        for i in tokenized:
            words = nltk.word_tokenize(i)
            tagged = nltk.pos_tag(words)
            # Regex with chunks on parts of speech. Holy shit.
            # RR: any adverb
            # VB: 
            # NNP: any proper noun
            # NN Any probably noun
            chunkGram = r"""Chunk: {<RB.?>*<VB.?><NNP>+<NN>?}"""
            chunkParser = nltk.RegexpParser(chunkGram)
            chunked = chunkParser.parse(tagged)

            chunked.draw()
    except Exception as e:
        print (str(e))


process_content()

