Notes from chapter 14.1 of Savich's Problem Solving with C++.

Templates allow us to define functions and classes which have
parameters for type names. This allows functions and classes to
have flexible argument types. Here, we show that we can define
a general swap function that can apply to different types.

We may wish to swap two ints, two floats, or two chars, etc, but
without templates, we'd have to define that behavior for each 
type of swap. With a template, we can write a template function
where the type of the arguments is specified as an additional
parameter.

Templates define behavior similar to this example code:
	void swap_values(Type_of_Variables& variable1, 
						Type_of_Variables& variable2)
	{
		Type_of_varialbes temp;
		temp = variable1;
		variable1 = variable2;
		variable2 = variable2;
	}

When we wish to write a template class or funciton, we need to use the
"template prefix".

template<class T>

Which tells the compiler that the definition of the class or template
that follows is a template with "T" as the type parameter. Note that in
this particular instance, "template<class T> is NOT a class declaration,
in this context, 'class' actually means type. ANSII allows for us to use
the more descripative 'typename' but for historical reasons, 'class'
remains. So, in effect, we are referencing the variable type with 'T'.

The compiler will actually behave as if we had specified a function
whose arguments were of type "whatever" when we call a function whose
arguments are an explicit type, as opposed to a generic type "T".

One drawback, according to Savitch is that multiple template function
declarations in the same source file (?) are not allowed, or rather,
the compiler shits all over itself. Also, although we can declare a
template function like any other function, apparantly, it doesn't work
as well (?).

For whatever reason, compilers suck-ass. So, we have to write function
templates a bit differently, since doing so normally, generates shit-fuck
tons of linker errors. Once solution, just inline everything thats in a 
template. Another solution, definition code goes in header. Oh Well.
