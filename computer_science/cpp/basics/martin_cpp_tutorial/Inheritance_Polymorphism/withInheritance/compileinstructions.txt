When compiling 'main.cpp' from source, you have to include all source files when compiling. Each class file will include its class header. Any class files to be used in main.cpp requires inclusion of the relevant headers.

1. Write class header, 'class.h'
2. Write class definition 'class.cpp' be sure to #include 'class.h'
3. Write main, #include class.h with other libraries you need. (follow special instructions to include this header file multiple times, to avoid errors).

How do we compile these source files into main to make a single executable? How does the compiler know to look at the class definition, given that it knows the class?

4. Compile main with sources!
	--> g++ main.cpp source.cpp -o output.exe

When a header file must be dependant on another header file, you may find that "father of all headers" file and guard it. In fact, some feel it is good practice to guard ALL header files. Details in lab notebook pp 96. The idea is that the header is only included once, but the programmer need not worry where it is first included, just that they can be sure that is has been included for all classes requirng it.
